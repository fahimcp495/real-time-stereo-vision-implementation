#include <fstream>
#include <opencv2/opencv.hpp>
#include "file_operations.h"

// Implementation of the savePGM function
void savePGM(const std::string& filename, const cv::Mat& image) {
    
    std::ofstream file(filename, std::ios::out);


    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return;
    }

    // Write PGM header
    file << "P2\n";
    file << "# Created by OpenCV\n";
    file << image.cols << " " << image.rows << "\n";
    file << "255\n";  // Maximum pixel value

    // Write pixel values
    for (int i = 0; i < image.rows; ++i) {
        for (int j = 0; j < image.cols; ++j) {
            file << static_cast<int>(image.at<uchar>(i, j)) << " ";
        }
        file << "\n";
    }

    file.close();
}

// Implementation of the readPGMP2 function
void readPGMP2(image_t *image, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Read PGM header
    char magic[3];
    fscanf(file, "%2s\n", magic);
    if (magic[0] != 'P' || magic[1] != '2') {
        fprintf(stderr, "Not a PGM P2 file\n");
        exit(EXIT_FAILURE);
    }

    // Skip comments
    char c = getc(file);
    while (c == '#') {
        while (getc(file) != '\n');
        c = getc(file);
    }
    ungetc(c, file);

    // Read image dimensions
    fscanf(file, "%d %d\n", &(image->imagesize_x), &(image->imagesize_y));

    // Allocate memory for pixel array
    image->pixel = (int **)malloc(image->imagesize_x * sizeof(int *));
    for (int i = 0; i < image->imagesize_x; ++i) {
        image->pixel[i] = (int *)malloc(image->imagesize_y * sizeof(int));
    }

    // Read pixel data
    for (int y = 0; y < image->imagesize_y; ++y) {
        for (int x = 0; x < image->imagesize_x; ++x) {
            fscanf(file, "%d", &(image->pixel[x][y]));
        }
    }

    fclose(file);
}

// Implementation of the writePGMP2 function
void writePGMP2(const char *filename, const image_t *image) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Write PGM header
    fprintf(file, "P2\n");
    fprintf(file, "# Generated by your program\n");
    fprintf(file, "%d %d\n", image->imagesize_x, image->imagesize_y);
    fprintf(file, "255\n");

    // Write pixel data
    for (int y = 0; y < image->imagesize_y; ++y) {
        for (int x = 0; x < image->imagesize_x; ++x) {
            fprintf(file, "%d ", image->pixel[x][y]);
        }
        fprintf(file, "\n");
    }

    fclose(file);
}
